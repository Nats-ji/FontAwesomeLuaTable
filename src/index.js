const fetch = require("node-fetch");
const YAML = require("yaml");
const fs = require("fs");

const MetadataURL =
  "https://github.com/FortAwesome/Font-Awesome/raw/4.x/src/icons.yml";

function formatName(aName) {
  // add _ prefix if name begin with a number
  if (!isNaN(aName.charAt(0))) aName = "_" + aName;

  const words = aName.split("-");
  words.forEach((word, idx, arr) => {
    arr[idx] = word.charAt(0).toUpperCase() + word.slice(1);
  });
  return words.join("");
}

function formatUnicode(aUnicode) {
  return `\\u{${aUnicode}}`;
}

function formatSearchString(aIcon) {
  let str = `fa-${aIcon.id}`;
  if (aIcon.hasOwnProperty("aliases") && Array.isArray(aIcon.aliases))
    str += `, fa-${aIcon.aliases.join(", fa-")}`;
  if (aIcon.hasOwnProperty("filter") && Array.isArray(aIcon.filter))
    str += `, ${aIcon.filter.join(", ")}`;
  return str;
}

function dumpAsLuaTable(aIcons) {
  let lua_str = "";
  lua_str +=
    "-- Generated by https://github.com/Nats-ji/FontAwesomeLuaTable for LuaJLT and Lua 5.3+\n";
  lua_str += `-- from ${MetadataURL}\n`;
  lua_str +=
    "-- for use with https://github.com/FortAwesome/Font-Awesome/blob/4.x/fonts/\n";
  lua_str += "local IconGlyphs = {\n";
  for (const icon of aIcons) {
    lua_str += `  ${icon.name} = "${icon.unicode}", -- ${icon.search}\n`;
  }
  lua_str += "}\n";
  lua_str += "return IconGlyphs\n";
  return lua_str;
}

function dumpLuaType(aIcons) {
  let lua_str = "";
  lua_str +=
    "-- Generated by https://github.com/Nats-ji/FontAwesomeLuaTable for VSCode extension sumneko.lua\n";
  lua_str += `-- from ${MetadataURL}\n`;
  lua_str +=
    "-- for use with https://github.com/FortAwesome/Font-Awesome/blob/4.x/fonts/\n";
  lua_str += "---@meta\n";
  lua_str += "---@diagnostic disable\n\n";
  lua_str += "---@class IconGlyphs\n";
  for (const icon of aIcons) {
    lua_str += `---@field ${icon.name} "${icon.unicode}" ${icon.search}\n`;
  }
  lua_str += "IconGlyphs = {}\n";
  return lua_str;
}

async function main() {
  // fetch metadata
  const response = await fetch(MetadataURL);
  const data = await response.text();
  const metadata = YAML.parse(data);

  // parse metadata
  const icons = [];
  for (const icon of metadata.icons) {
    icons.push({
      name: formatName(icon.id),
      unicode: formatUnicode(icon.unicode),
      search: formatSearchString(icon),
    });
  }

  // generate lua file
  fs.mkdirSync("lua", { recursive: true });
  fs.writeFileSync("lua/IconsFontAwesome4.lua", dumpAsLuaTable(icons));
  fs.writeFileSync("lua/IconsFontAwesome4.type.lua", dumpLuaType(icons));
  console.log("Done");
}

main();
